source("main.R")
cd.hit.results
ordered.sequences
pkgTest ("bio3d")
library(bio3d)
View(pkgTest)
View(pkgTest)
View(pkgTest)
pkgTest()
pkgTest
library(bio3d)
fastaFile = read.fasta ("DiceMini01.fasta")
vectorFasta = as.vector (fastaFile$ali)
vectorFasta
fastaFile
fastaFile[1]
fastaFile[2]
fastaFile[,2]
fastaFile = read.fasta ("DiceMini01.fasta")
fastaFile
fastaFile[[1]]
fastaFile[[2]]
fastaFile[[3]]
fastaFile[[2,1]]
fastaFile[[2]]
fastaFile
fastaFile[[2]][,]
fastaFile[[2]][-1,]
fastaFile[[2]][,-1]
fastaFile[[2]][,-1]
fastaFile[[2]]
as.matrix(fastaFile[[2]])
size(as.matrix(fastaFile[[2]]))
ncol(as.matrix(fastaFile[[2]]))
nrow(as.matrix(fastaFile[[2]]))
nrow(as.matrix(fastaFile[[2]]))[1,]
as.matrix(fastaFile[[2]])[1,]
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
fasta.sequences <- as.matrix(fastaFile[[2]])
fasta.sequences
fasta.sequences[1,]
paste(fasta.sequences, sep = "", col collapse = "")
paste(fasta.sequences, sep = "", collapse = "")
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
}
sequences<-generate.random.dna.sequences(10,7,4)
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
}
sequences
sequences[1]
sequences[2]
s1 = unlist(strsplit(sequences[1], split='-', fixed=TRUE)
)
s1
s1 = unlist(strsplit(sequences[1], split='-', fixed=TRUE))[1]
s1
library(bio3d)
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
sequences
print("original sequences are:")
print(sequences)
ordered.sequences <- order.sequences.by.length(sequences) # this should be inside "cd.hit" but let's keep it here
ordered.sequences
print("ordered sequences:")
print(ordered.sequences)
threshold <- 0.9
k.mers <- c(2,5) # the "k" values to be evaluated, 2-mers and 5-mers are the default in the CD-HIT algorithm
cd.hit.results <- cd.hit(ordered.sequences, threshold, k.mers)
cd.hit.results
cd.hit.results[[2]][65]
ordered.sequences[2]
ordered.sequences[65]
kmers.comparisson(ordered.sequences[19], ordered.sequences[65], k = 2, threshold = 0.9)
ordered.sequences[19]
ordered.sequences[65]
a <- ordered.sequences[65]
a <- "ATCGACGGCGGTGGTTGGC"
b <- ordered.sequences[19]
a
b
kmers.comparisson(a,b, k = 2, threshold = 0.9)
a <- "ATCGACGGCGGTGGTTGGA"
kmers.comparisson(a,b, k = 2, threshold = 0.9)
a <- "TTCGACGGCGGTGGTTGGA"
kmers.comparisson(a,b, k = 2, threshold = 0.9)
a <- ordered.sequences[65]
a
a <- "TTCGACGGCGGTGTTTGGC"
kmers.comparisson(a,b, k = 2, threshold = 0.9)
kmers.comparisson(a,b, k = 5, threshold = 0.9)
kmers.comparisson(a,b, k = 6, threshold = 0.9)
kmers.comparisson(a,b, k = 7, threshold = 0.9)
kmers.comparisson(a,b, k = 8, threshold = 0.9)
kmers.comparisson(a,b, k = 9, threshold = 0.9)
pkgTest ("bio3d")
library(bio3d)
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
print("original sequences are:")
print(sequences)
ordered.sequences <- order.sequences.by.length(sequences) # this should be inside "cd.hit" but let's keep it here
print("ordered sequences:")
print(ordered.sequences)
threshold <- 0.9
k.mers <- c(2,5) # the "k" values to be evaluated, 2-mers and 5-mers are the default in the CD-HIT algorithm
cd.hit.results <- cd.hit(ordered.sequences, threshold, k.mers)
setwd("~/code/doc/bioinformaticscourse/module2/04CDHIT_homework")
rm(list = ls())
source("/home/fito/code/fito_lib/r/pkgtest.R")
source("cd.hit.lib.R") # all methods used here for CDHIT
pkgTest("data.table")
pkgTest ("bio3d")
library(bio3d)
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
print("original sequences are:")
print(sequences)
ordered.sequences <- order.sequences.by.length(sequences) # this should be inside "cd.hit" but let's keep it here
print("ordered sequences:")
print(ordered.sequences)
threshold <- 0.9
k.mers <- c(2,5) # the "k" values to be evaluated, 2-mers and 5-mers are the default in the CD-HIT algorithm
cd.hit.results <- cd.hit(ordered.sequences, threshold, k.mers)
source("/home/fito/code/fito_lib/r/pkgtest.R")
source("cd.hit.lib.R") # all methods used here for CDHIT
pkgTest("data.table")
pkgTest ("bio3d")
library(bio3d)
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
sequences <- array()
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
print("original sequences are:")
print(sequences)
ordered.sequences <- order.sequences.by.length(sequences) # this should be inside "cd.hit" but let's keep it here
print("ordered sequences:")
print(ordered.sequences)
threshold <- 0.9
k.mers <- c(2,5) # the "k" values to be evaluated, 2-mers and 5-mers are the default in the CD-HIT algorithm
cd.hit.results <- cd.hit(ordered.sequences, threshold, k.mers)
source("main.R")
source("main.R")
sequences
rownames(sequences) <- rownames(fasta.sequences)
sequences <- array()
rownames(sequences) <- rownames(fasta.sequences)
rownames(fasta.sequences)
sequences <- array()
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
rownames(sequences) <- rownames(fasta.sequences)
sequences <- matrix()
for (i in 1:nrow(fasta.sequences)){
sequences[i,1] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i,1] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
sequences <- array()
for (i in 1:nrow(fasta.sequences)){
sequences[i,1] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i,1] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
sequences <- array()
for (i in 1:nrow(fasta.sequences)){
sequences[i,1] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i,1] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
names(sequences) <- rownames(fasta.sequences)
sequences
names(sequences) <- rownames(fasta.sequences)
names(sequences) <- rownames(fasta.sequences)
setwd("~/code/doc/bioinformaticscourse/module2/04CDHIT_homework")
rm(list = ls())
source("/home/fito/code/fito_lib/r/pkgtest.R")
source("cd.hit.lib.R") # all methods used here for CDHIT
pkgTest("data.table")
pkgTest ("bio3d")
library(bio3d)
fastaFile = read.fasta ("DiceMini01.fasta")
fasta.sequences <- as.matrix(fastaFile[[2]])
sequences <- array()
for (i in 1:nrow(fasta.sequences)){
sequences[i] <- paste(fasta.sequences[i,], sep = "", collapse = "")
sequences[i] <- unlist(strsplit(sequences[i], split='-', fixed=TRUE))[1]
}
names(sequences) <- rownames(fasta.sequences)
ordered.sequences <- order.sequences.by.length(sequences) # this should be inside "cd.hit" but let's keep it here
print("ordered sequences:")
print(ordered.sequences)
threshold <- 0.8
k.mers <- c(2) # the "k" values to be evaluated, 2-mers and 5-mers are the default in the CD-HIT algorithm
cd.hit.results <- cd.hit(ordered.sequences, threshold, k.mers)
source("main.R")
source("main.R")
source("main.R")
source("main.R")
cd.hit.results[[3]]
source("main.R")
print(cd.hit.results[[3]])
source("main.R")
sequences(cd.hit.results[[3]][[1]][1])
sequences[cd.hit.results[[3]][[1]][1]]
sequences[cd.hit.results[[3]][[1]][2]]
sequences[cd.hit.results[[3]][[1]][3]]
sequences[cd.hit.results[[3]][[1]][1]]
source("main.R")
source("main.R")
source("main.R")
cluster.sets <- cd.hit.results["cluster.sets"]
cluster.sets <- cd.hit.results["cluster.sets"]
print(summary(cluster.sets)
print(summary(cluster.sets))
print(summary(cluster.sets))
print((cluster.sets))
source("main.R")
source("main.R")
elemento <- c("A","P", "L", "F", "C")
source('~/.active-rstudio-document')
setwd("~/code/doc/bioinformaticscourse/module2/20170419geneticalgor")
peso <- c(2,1,4,1,3)
valor <- c(10,5,1,7,3)
fenotipo <- as.matrix(c(elemento, peso, valor))
fenotipo <- as.matrix(c(elemento, peso, valor), byrow = T)
fenotipo <- as.matrix(c(elemento, peso, valor), 3,  byrow = T)
fenotipo
fenotipo <- as.matrix(c(elemento, peso, valor), 3, 5,  byrow = T)
fenotipo
fenotipo <- as.matrix(c(elemento, peso, valor), 5,  byrow = F)
fenotipo
fenotipo <- as.matrix(c(elemento, peso, valor), 5,  byrow = T)
print(fenotipo)
fenotipo <- matrix(c(elemento, peso, valor), 5,  byrow = T)
print(fenotipo)
fenotipo <- matrix(c(elemento, peso, valor), 5,  byrow = F)
print(fenotipo)
fenotipo <- matrix(c(elemento, peso, valor), 3,  byrow = T)
print(fenotipo)
colnames(fenotipo) <- nombres.filas
nombres.filas <- c("elemento", "peso", "valor")
colnames(fenotipo) <- nombres.filas
rownames(fenotipo) <- nombres.filas
setwd("~/code/doc/bioinformaticscourse/module2/20170419geneticalgor")
rm(list = ls())
elemento <- c("A","P", "L", "F", "C")
peso <- c(2,1,4,1,3)
valor <- c(10,5,1,7,3)
fenotipo <- matrix(c(elemento, peso, valor), 3,  byrow = T)
nombres.filas <- c("elemento", "peso", "valor")
rownames(fenotipo) <- nombres.filas
print(fenotipo)
cromosomas <- list()
cromosomas[[1]] <- c(0,1,0,0,1)
cromosomas[[2]] <- c(1,0,1,0,1)
cromosomas[[3]] <- c(0,1,0,1,1)
cromosomas[[4]] <- c(1,1,1,0,0)
cromosomas[[5]] <- c(0,1,1,0,0)
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/20170419geneticalgor/class.exercise.R')
print(as.matrix(cromosomas)
print(as.matrix(cromosomas)
)
print(as.matrix(cromosomas))
print((cromosomas))
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(phenotype["value",] * chromosome)
}
elemento <- c("A","P", "L", "F", "C")
setwd("~/code/doc/bioinformaticscourse/module2/20170419geneticalgor")
rm(list = ls())
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(phenotype["value",] * chromosome)
}
element <- c("A","P", "L", "F", "C")
weight <- c(2,1,4,1,3)
value <- c(10,5,1,7,3)
phenotype <- matrix(c(element, weight, value), 3,  byrow = T)
rownames(phenotype) <- c("element", "weight", "value")
print(phenotype)
chromosomes <- list()
chromosomes[[1]] <- c(0,1,0,0,1)
chromosomes[[2]] <- c(1,0,1,0,1)
chromosomes[[3]] <- c(0,1,0,1,1)
chromosomes[[4]] <- c(1,1,1,0,0)
chromosomes[[5]] <- c(0,1,1,0,0)
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
print(phenotype)
phenotype["value"]
phenotype["value",]
as.numeric(phenotype["value",])
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(as.numeric(phenotype["value",]) * as.numeric(chromosome)
}
element <- c("A","P", "L", "F", "C")
weight <- c(2,1,4,1,3)
value <- c(10,5,1,7,3)
phenotype <- matrix(c(element, weight, value), 3,  byrow = T)
rownames(phenotype) <- c("element", "weight", "value")
print(phenotype)
chromosomes <- list()
chromosomes[[1]] <- c(0,1,0,0,1)
chromosomes[[2]] <- c(1,0,1,0,1)
chromosomes[[3]] <- c(0,1,0,1,1)
chromosomes[[4]] <- c(1,1,1,0,0)
chromosomes[[5]] <- c(0,1,1,0,0)
# print((cromosomas))
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(as.numeric(phenotype["value",]) * as.numeric(chromosome)
}
element <- c("A","P", "L", "F", "C")
weight <- c(2,1,4,1,3)
value <- c(10,5,1,7,3)
phenotype <- matrix(c(element, weight, value), 3,  byrow = T)
rownames(phenotype) <- c("element", "weight", "value")
print(phenotype)
chromosomes <- list()
chromosomes[[1]] <- c(0,1,0,0,1)
chromosomes[[2]] <- c(1,0,1,0,1)
chromosomes[[3]] <- c(0,1,0,1,1)
chromosomes[[4]] <- c(1,1,1,0,0)
chromosomes[[5]] <- c(0,1,1,0,0)
# print((cromosomas))
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
rm(list = ls())
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(as.numeric(phenotype["value",]) * as.numeric(chromosome)
}
element <- c("A","P", "L", "F", "C")
weight <- c(2,1,4,1,3)
value <- c(10,5,1,7,3)
phenotype <- matrix(c(element, weight, value), 3,  byrow = T)
rownames(phenotype) <- c("element", "weight", "value")
print(phenotype)
chromosomes <- list()
chromosomes[[1]] <- c(0,1,0,0,1)
chromosomes[[2]] <- c(1,0,1,0,1)
chromosomes[[3]] <- c(0,1,0,1,1)
chromosomes[[4]] <- c(1,1,1,0,0)
chromosomes[[5]] <- c(0,1,1,0,0)
# print((cromosomas))
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(as.numeric(phenotype["value",]) * as.numeric(chromosome) )
}
element <- c("A","P", "L", "F", "C")
weight <- c(2,1,4,1,3)
value <- c(10,5,1,7,3)
phenotype <- matrix(c(element, weight, value), 3,  byrow = T)
rownames(phenotype) <- c("element", "weight", "value")
print(phenotype)
chromosomes <- list()
chromosomes[[1]] <- c(0,1,0,0,1)
chromosomes[[2]] <- c(1,0,1,0,1)
chromosomes[[3]] <- c(0,1,0,1,1)
chromosomes[[4]] <- c(1,1,1,0,0)
chromosomes[[5]] <- c(0,1,1,0,0)
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
evaluate.chromosome.fitness <- function(chromosome, phenotype){
return(sum(as.numeric(phenotype["value",]) * as.numeric(chromosome)))
}
evaluate.chromosome.fitness(chromosomes[[1]], phenotype)
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
fitnesses <- array()
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
fitnesses
evaluate.chromosome.fitness <- function(chromosome, phenotype){
profit <- sum(as.numeric(phenotype["value",]) * as.numeric(chromosome))
total.weight <- sum(as.numeric(phenotype["value",]) * as.numeric(chromosome))
return(profit * (total.weight > 15))
}
fitnesses <- array()
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
fitnesses
evaluate.chromosome.fitness <- function(chromosome, phenotype){
profit <- sum(as.numeric(phenotype["value",]) * as.numeric(chromosome))
total.weight <- sum(as.numeric(phenotype["value",]) * as.numeric(chromosome))
return(profit * (total.weight <=15 ))
}
fitnesses <- array()
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
print(fitnesses)
sample(fitnesses, 3, replace = F)
sample(fitnesses, 3, replace = F)
names(chromosomes) <- c(toupper(letters[1:length(chromosomes)]))
fitnesses <- array()
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
print(fitnesses)
sample(fitnesses, 3, replace = F)
names(fitnesses) <- names(chromosomes)
sample(fitnesses, 3, replace = F)
print(fitnesses)
fitnesses <- array()
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
names(fitnesses) <- names(chromosomes)
print(fitnesses)
sample(fitnesses, 3, replace = F)
parents <- order(fitnesses, decreasing=TRUE)[1:2]
parents
fitnesses
parents <- names(fitnesses)[order(fitnesses, decreasing=TRUE)[1:2]]
print(parents)
chromosomes
children[1] <- c(chromosomes[parents[1]][1:2], chromosomes[parents[2]][3:5]])
children[1] <- c(chromosomes[parents[1]][1:2], chromosomes[parents[2]][3:5])
children <- array()
children[1] <- c(chromosomes[parents[1]][1:2], chromosomes[parents[2]][3:5])
chromosomes[parents[1]][1:2]
parents[1]
chromosomes[parents[1]]
chromosomes[parents[1]][1:2]
as.array(chromosomes[parents[1]])
as.array(chromosomes[parents[1]])[1:2]
as.array(chromosomes[parents[1]])[,1:2]
as.array(chromosomes[parents[1]])
as.array(chromosomes[parents[1]])[1]
as.array(chromosomes[parents[1]])[[1]]
as.array(chromosomes[[parents[1]]])
(chromosomes[[parents[1]]])
chromosomes[[parents[1]]]
chromosomes[[parents[1]]][1:2]
children[1] <- c(chromosomes[[parents[1]]][1:2], chromosomes[[parents[2]]][3:5])
chromosomes[[parents[1]]][1:2]
chromosomes[[parents[2]]][3:5]
c(chromosomes[[parents[1]]][1:2], chromosomes[[parents[2]]][3:5])
children <- list()
children[[1]] <- c(chromosomes[[parents[1]]][1:2], chromosomes[[parents[2]]][3:5])
children <- list()
children[[1]] <- c(chromosomes[[parents[1]]][1:2], chromosomes[[parents[2]]][3:5])
children[[2]] <- c(chromosomes[[parents[2]]][1:2], chromosomes[[parents[1]]][3:5])
children
chromosomes[[parents[1]]] <- children[[1]]
chromosomes[[parents[2]]] <- children[[2]]
next.generation <- chromosomes
setwd("~/code/doc/bioinformaticscourse/module2/20170419geneticalgor")
rm(list = ls())
evaluate.chromosome.fitness <- function(chromosome, phenotype){
profit <- sum(as.numeric(phenotype["value",]) * as.numeric(chromosome))
total.weight <- sum(as.numeric(phenotype["value",]) * as.numeric(chromosome))
return(profit * (total.weight <=15 ))
}
element <- c("A","P", "L", "F", "C")
weight <- c(2,1,4,1,3)
value <- c(10,5,1,7,3)
phenotype <- matrix(c(element, weight, value), 3,  byrow = T)
rownames(phenotype) <- c("element", "weight", "value")
print(phenotype)
chromosomes <- list()
chromosomes[[1]] <- c(0,1,0,0,1)
chromosomes[[2]] <- c(1,0,1,0,1)
chromosomes[[3]] <- c(0,1,0,1,1)
chromosomes[[4]] <- c(1,1,1,0,0)
chromosomes[[5]] <- c(0,1,1,0,0)
names(chromosomes) <- c(toupper(letters[1:length(chromosomes)]))
fitnesses <- array()
for (i in 1:length(chromosomes)){
fitnesses[i] <- evaluate.chromosome.fitness(chromosomes[[i]], phenotype)
}
names(fitnesses) <- names(chromosomes)
print(fitnesses)
parents <- names(fitnesses)[order(fitnesses, decreasing=TRUE)[1:2]] # take the best 2 parents
children <- list()
children[[1]] <- c(chromosomes[[parents[1]]][1:2], chromosomes[[parents[2]]][3:5])
children[[2]] <- c(chromosomes[[parents[2]]][1:2], chromosomes[[parents[1]]][3:5])
next.generation <- chromosomes
next.generation[[parents[1]]] <- children[[1]]
next.generation[[parents[2]]] <- children[[2]]
print(chromosomes)
print(next.generation)
