source('~/code/thesis_R/install.R', echo=TRUE)
setwd('~/code/doc/bioinformaticscourse/module2/20170329viterbi')
setwd("/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code")
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code/hmm-viterbi-itera.R')
source("hmm-readFasta.R")
tion(x){
if (!require(x,character.only = TRUE)){
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
pkgTest <- function(x){
if (!require(x,character.only = TRUE)){
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
pkgTest("bio3d")
stringSequence = "CCCGGGGTTTCCC"
test_string=gsub("G", stringSequence)
test_string=gsub("G", "", stringSequence)
test_string
pkgTest("bio3d")
source("hmm-readFasta.R")
vectorFasta
stringSequence = vectorFasta
mySequence     = strsplit (stringSequence, split="")[[1]]
mySequence
mySequence = vectorFasta
theMostProbPath = viterbi (mySequence, transitions, emissions)
length(mySequence)
cat (theMostProbPath)
save(theMostProbPath, "theMostProbPath.original")
save(theMostProbPath, file = "theMostProbPath.original")
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code/myviterbi.iter.R')
theMostProbPath.original = load("theMostProbPath.original")
theMostProbPath.questionary = load("theMostProbPath.questionary")
equal.paths = theMostProbPath.original == theMostProbPath.questionary
plot(equal.paths)
equal.paths
apply(theMostProbPath.original,1,`=`,theMostProbPath.questionary)
apply(theMostProbPath.original,2,`=`,theMostProbPath.questionary)
mapply(agrep,theMostProbPath.original,theMostProbPath.questionary,value=TRUE)
theMostProbPath.original
theMostProbPath.questionary
save(theMostProbPath, file = "theMostProbPath.original")
theMostProbPath.questionary
theMostProbPath.questionary = theMostProbPath
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code/myviterbi.iter.R')
equal.paths = theMostProbPath.original == theMostProbPath.questionary
equal.paths
length(theMostProbPath.original)
length(theMostProbPath.questionary)
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code/myviterbi.iter.R')
length(theMostProbPath.questionary)
length(theMostProbPath.original)
theMostProbPath.original = theMostProbPath
length(theMostProbPath.original)
save(theMostProbPath, file = "theMostProbPath.original")
el.load = load("theMostProbPath.original")
el.load
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code/myviterbi.iter.R')
source('/media/fito/Windows/Users/fitoh/Documents/code/doc/bioinformaticscourse/module2/03hmm_homework/code/myviterbi.iter.R')
plot(theMostProbPath.original)
head(theMostProbPath.original)
df1 <- data.frame(Eyeball= c("H", "L"),
nums= c(1:2))
theMostProbPath.original.dataframe <- merge(theMostProbPath.original, df1, by="Eyeball", all=TRUE)
df1
theMostProbPath.original.dataframe = as.data.frame(theMostProbPath.original)
theMostProbPath.original.dataframe.eyeball <- merge(theMostProbPath.original, df1, by="Eyeball", all=TRUE)
df1
names(theMostProbPath.original.dataframe)
head(theMostProbPath.original.dataframe)
theMostProbPath.original.dataframe.eyeball <- merge(theMostProbPath.original, df1, by.x="theMostProbPath.original", by.y="Eyeball", all=TRUE)
theMostProbPath.original.dataframe.eyeball <- merge(theMostProbPath.original, df1, by.x=1, by.y="Eyeball", all=TRUE)
theMostProbPath.original.dataframe.merge <- merge(theMostProbPath.original, df1, by.x=1, by.y="Eyeball", all=TRUE)
theMostProbPath.original.dataframe.merge
head(theMostProbPath.original.dataframe.merge)
states.numbers <- data.frame(Eyeball= c("H", "L"),
nums= c(1:2))
theMostProbPath.original.dataframe = as.data.frame(theMostProbPath.original)
theMostProbPath.original.dataframe.merge <- merge(theMostProbPath.original, states.numbers, by.x=1, by.y="Eyeball", all=TRUE)
plot(theMostProbPath.original.dataframe.merge[,2], xaxt="n", xlab="Eyeball", ylab="Measured")
mtext(1, text=theMostProbPath.original.dataframe.merge[,1], at=1:length(theMostProbPath.original.dataframe.merge[,1]), line = 1 , cex=.7  )
head(theMostProbPath.original.dataframe)
head(theMostProbPath.original)
library(ggplot2)
states.numbers
states.numbers[nums]
states.numbers["nums"]
states.numbers <- data.frame(states= c("H", "L"),
nums= c(1:2))
theMostProbPath.original.dataframe = as.data.frame(theMostProbPath.original)
theMostProbPath.original.dataframe.merge <- merge(theMostProbPath.original, states.numbers, by.x=1, by.y="states", all=TRUE)
plot(theMostProbPath.original.dataframe.merge[,2], xaxt="n", xlab="sequence", ylab="Measured")
mtext(1, text=theMostProbPath.original.dataframe.merge[,1],
at=1:length(theMostProbPath.original.dataframe.merge[,1]),
line = 1 , cex=.7  )
library(ggplot2)
scale_x_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
scale_x_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
qplot(theMostProbPath.original.dataframe.merge[,2])
scale_x_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
qplot(y=theMostProbPath.original.dataframe.merge[,2])
scale_x_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
scale_y_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
qplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
scale_y_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])
ylab(Null)
ylab(NULL)
qplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = states.numbers["nums"], labels=states.numbers["states"])+
ylab(NULL)
states.numbers["states"]
as.array(states.numbers["states"])
library(ggplot2)
qplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
x <- sample(1:5, 20, T)
y <- rnorm(20) + x
df <- data.frame(x = ordered(x), y = y)
ggplot(df,aes(x,y)) + geom_point() +
scale_x_discrete(breaks = 1:5, labels = letters[1:5])
ggplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
ggplot(theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
? aes
head(theMostProbPath.original.dataframe.merge)
plot(theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
ggplot(theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
ggplot(theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
ggplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
qplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
qplot(y=theMostProbPath.original.dataframe.merge[,2])
ylab(NULL)
qplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("H","L"))+
ylab(NULL)
library(lattice)
dotplot(data=theMostProbPath.original.dataframe.merge)
dotplot(data=theMostProbPath.original.dataframe.merge)
dotplot(x=1:length(theMostProbPath.original.dataframe.merge), data=theMostProbPath.original.dataframe.merge)
dotplot(x=1:length(theMostProbPath.original.dataframe.merge), data=theMostProbPath.original.dataframe.merge[,2], )
dotplot(x=1:length(theMostProbPath.original.dataframe.merge), data=theMostProbPath.original.dataframe.merge[,2], )
dotplot(x=1:length(theMostProbPath.original.dataframe.merge[,2]), data=theMostProbPath.original.dataframe.merge[,2] )
dotplot(x=1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original.dataframe.merge[,2] )
dotplot(1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original.dataframe.merge[,2] )
dotplot(1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original.dataframe)
dotplot(1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original)
plot(1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original)
plot(1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original.dataframe.merge[,2])
ggplot(1:length(theMostProbPath.original.dataframe.merge[,2]), theMostProbPath.original.dataframe.merge[,2])
plot(1:length(theMostProbPath.original.dataframe.merge[,2]) ~ theMostProbPath.original.dataframe.merge[,2], col=theMostProbPath.original.dataframe.merge[,1]
plot(1:length(theMostProbPath.original.dataframe.merge[,2]) ~ theMostProbPath.original.dataframe.merge[,2], col=theMostProbPath.original.dataframe.merge[,1])
plot(1:length(theMostProbPath.original.dataframe.merge[,2]) ~ theMostProbPath.original.dataframe.merge[,2], col=theMostProbPath.original.dataframe.merge[,1])
plot(theMostProbPath.original.dataframe.merge[,2], col=theMostProbPath.original.dataframe.merge[,1])
head(theMostProbPath.original.dataframe.merge[,1])
plot(theMostProbPath.original.dataframe.merge[,2], col=theMostProbPath.original.dataframe.merge[,1], xaxt)
library(ggplot2)
qplot(y=theMostProbPath.original.dataframe.merge[,2])+
scale_y_discrete(breaks = c(1,2), labels=c("L","H"))+
ylab(NULL)
6.666667e-05
6.666667e-05*3
1-6.666667e-05*3
0.9998+3*6.666667e-05
clear(list=ls())
rm(list=ls())
setwd("~/code/doc/bioinformaticscourse/module2/03hmm_homework/code")
nucleotides         <- c("A", "C", "G", "T")   # Define the alphabet of nucleotides
states              <- c("Ar", "Cr", "Gr", "Tr")             # Define the names of the states Hight (CG-rich) and Low (AT-rich)
Arichprobs         <- c(0.9998, 6.666667e-05, 6.666667e-05, 6.666667e-05)
Crichprobs         <- c(6.666667e-05, 0.9998, 6.666667e-05, 6.666667e-05)
Grichprobs         <- c(6.666667e-05, 6.666667e-05, 0.9998, 6.666667e-05)
Trichprobs         <- c(6.666667e-05, 6.666667e-05, 6.666667e-05, 0.9998)
transitions <- matrix(c(Arichprobs, Crichprobs, Grichprobs, Trichprobs), 4, 4, byrow = TRUE) # Create a 2 x 2 matrix
rownames(transitions) <- states
colnames(transitions) <- states
cat (">>> The transition matriz for all rich states is:\n")
print (transitions)
Arich.InputProbs      <- c(0.3236, 0.2084, 0.198, 0.27)
Crich.InputProbs      <- c(0.2462, 0.2985, 0.2476, 0.2077)
Grich.InputProbs      <- c(0.2462, 0.2476, 0.2985, 0.2077)
Trich.InputProbs      <- c(0.27, 0.2084, 0.198, 0.3236)
emissions <- matrix(+
c(Arich.InputProbs, Crich.InputProbs, Grich.InputProbs, Trich.InputProbs),+
4, 4, byrow = TRUE) # Create a 4 x 4 matrix
rownames(emissions) <- states
colnames(emissions) <- nucleotides
print (emissions)
fillViterbiGraph <- function(sequence, transitions, emissions) {
# Find out how many states are in the HMM
numstates <- dim(transitions)[1]
# Make a matrix with as many rows as positions in the sequence, and as many
# columns as states in the HMM
v <- matrix(NA, nrow =  dim(transitions)[1], ncol = length(sequence) )
# Set the values in the first column of matrix v (representing the first position of the sequence) to 0
v[,1] <- 0
# Set the value in the first row of matrix v, first column to 1
v[1,1] <- 1
# Fill in the matrix v:
for (i in 2:length(sequence)) { # For each position in the DNA sequence:
for (l in 1:numstates) {  # For each of the states of in the HMM:
# Find the probabilility, if we are in state l, of choosing the nucleotide at position in the sequence
statelprobnucleotidei <- emissions[l,sequence[i]]
v[l,i] <-  statelprobnucleotidei * max(v[,(i-1)] * transitions[,l])
}
}
return(v)
}
fillViterbiGraph <- function(sequence, transitions, emissions) {
# Find out how many states are in the HMM
numstates <- dim(transitions)[1]
# Make a matrix with as many rows as positions in the sequence, and as many
# columns as states in the HMM
v <- matrix(NA, nrow =  dim(transitions)[1], ncol = length(sequence) )
# Set the values in the first column of matrix v (representing the first position of the sequence) to 0
v[,1] <- 0
# Set the value in the first row of matrix v, first column to 1
v[1,1] <- 1
# Fill in the matrix v:
for (i in 2:length(sequence)) { # For each position in the DNA sequence:
for (l in 1:numstates) {  # For each of the states of in the HMM:
# Find the probabilility, if we are in state l, of choosing the nucleotide at position in the sequence
statelprobnucleotidei <- emissions[l,sequence[i]]
v[l,i] <-  statelprobnucleotidei * max(v[,(i-1)] * transitions[,l])
}
}
return(v)
}
#-----------------------------------------------------------------------
# This carries out the Viterbi algorithm by calling the fillViterbiGraph function
#-----------------------------------------------------------------------
viterbi <- function(sequence, transitions, emissions) {
theMostProbPath = character()
# Get the names of the states in the HMM:
states <- rownames(emissions)
# Make the Viterbi matrix v:
v <- fillViterbiGraph(sequence, transitions, emissions)
# Go through each of the rows of the matrix v (where each row represents
# a position in the DNA sequence), and find out which column has the
# maximum value for that row (where each column represents one state of
# the HMM):
mostprobablestatepath <- apply(v, 2, function(x) which.max(x))
# Print out the most probable state path:
prevnucleotide <- sequence[1]
prevmostprobablestate <- mostprobablestatepath[1]
prevmostprobablestatename <- states[prevmostprobablestate]
theMostProbPath = c(theMostProbPath, prevmostprobablestatename)
startpos <- 1
for (i in 2:length(sequence)) {
nucleotide <- sequence[i]
mostprobablestate <- mostprobablestatepath[i]
mostprobablestatename <- states[mostprobablestate]
if (mostprobablestatename != prevmostprobablestatename) {
print(paste("Positions",startpos,"-",(i-1), "Most probable state = ", prevmostprobablestatename))
startpos <- i
}
prevnucleotide <- nucleotide
prevmostprobablestatename <- mostprobablestatename
theMostProbPath = c(theMostProbPath, mostprobablestatename)
}
print(paste("Positions",startpos,"-",i, "Most probable state = ", prevmostprobablestatename))
return (theMostProbPath)
}
pkgTest <- function(x){
if (!require(x,character.only = TRUE)){
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
pkgTest("bio3d")
source("hmm-readFasta.R")
mySequence = vectorFasta
theMostProbPath = viterbi (mySequence, transitions, emissions)
emissions
View(emissions)
sum(emission[1,])
sum(emissions[1,])
sum(emissions[2,])
sum(emissions[3,])
sum(emissions[4,])
emissions
transitions[1,]
sum(transitions[1,])
sum(transitions[2,])
sum(transitions[3,])
sum(transitions[4,])
cat (mySequence)
cat (theMostProbPath)
cat ("\n>>> The most probable path is:\n")
cat (mySequence)
cat ("\n")
cat (theMostProbPath)
cat ("\n")
theMostProbPath = viterbi (mySequence, transitions, emissions)
